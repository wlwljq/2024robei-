module pid_controller(
	sys_clk,
	sys_rst_n,
	setpoint_n,
	feedback_n,
	Kp,
	Ki,
	Kd,
	control_out);

	//---Ports declearation: generated by Robei---
	input sys_clk;
	input sys_rst_n;
	input [15:0] setpoint_n;
	input [15:0] feedback_n;
	input [15:0] Kp;
	input [15:0] Ki;
	input [15:0] Kd;
	output [15:0] control_out;

	wire sys_clk;
	wire sys_rst_n;
	wire [15:0] setpoint_n;
	wire [15:0] feedback_n;
	wire [15:0] Kp;
	wire [15:0] Ki;
	wire [15:0] Kd;
	wire [15:0] control_out;

	//----Code starts here: integrated by Robei-----
	
	
	
	wire signed [15:0] setpoint;
	wire signed [15:0] feedback;
	// 误差
	reg signed [15:0] error;
	reg signed [15:0] error_prev1;
	reg signed [15:0] error_prev2;
	// 控制增量
	reg signed [15:0] delta_u;
	reg signed [15:0] control;
	    
	reg signed [15:0] delta_u_prev;
	    
	reg ok_10ms;  
	reg  [15:0] cnt0;
	reg [31:0] cnt_10ms;
	    
	assign control_out=control+1000;
	assign setpoint=setpoint_n-1000;
	assign feedback=feedback_n-1000;
	
	// 计数
	always@(posedge sys_clk,negedge sys_rst_n)
	begin
	    if(!sys_rst_n)begin
	        cnt_10ms <= 1'b0;
	        ok_10ms <= 1'b0;
	    end
	    else begin
	            if(cnt_10ms ==333333)begin
	                cnt_10ms <= 1'b0;
	                ok_10ms <= 1'b1;
	            end
	            else begin
	                cnt_10ms <= cnt_10ms + 1'b1;
	                ok_10ms <= 1'b0;
	            end
	    end
	end
	always @(posedge sys_clk or negedge sys_rst_n) begin
	    if (!sys_rst_n) begin
	        // 复位
	        error <= 0;
	        error_prev1 <= 0;
	        error_prev2 <= 0;
	        control <= 0;
	        delta_u <= 0;
	        
	    end 
		else begin
			if(ok_10ms)begin
	            // 计算当前误差
	            error <= setpoint - feedback;
	    
	            // 计算增量
	            delta_u <=Kp * (setpoint - feedback - error) +
	                       Ki * (setpoint - feedback) +
	                       Kd * (error - 2 * error_prev1 + error_prev2);
	    
	            // 更新控制量
	            if(cnt0<200)
	                control <=control > 1000?1000:control < -1000? -1000:control + delta_u;//限幅
	            else
	               control <=0;
	            
	               
	            delta_u_prev<=delta_u;
	            // 更新误差
	            error_prev2 <= error_prev1;
	            error_prev1 <= error;
	        end
	    end
	end
	    
	    //控制量清零
	always @(posedge sys_clk or negedge sys_rst_n) begin
	    if (!sys_rst_n) 
	        cnt0<=0;
		else if(ok_10ms)begin
	        if(delta_u==0)       
	            cnt0<=cnt0>=1000?1000:cnt0+1;         
	        else
	            cnt0<=0;
	    end
	    else
	        cnt0<=cnt0;
	 end
endmodule    //pid_controller

