module encoder(
	sys_clk,
	sys_rst_n,
	A,
	B,
	speed_out);

	//---Ports declearation: generated by Robei---
	input sys_clk;
	input sys_rst_n;
	input A;
	input B;
	output [15:0] speed_out;

	wire sys_clk;
	wire sys_rst_n;
	wire A;
	wire B;
	wire [15:0] speed_out;

	//----Code starts here: integrated by Robei-----
	reg signed [15:0] speed_out_r;
	reg signed [15:0] speed_can_all=0;
	reg ok_20ms;
	reg signed [15:0] speed_cnt;
	
	reg ok_10us;
	reg [15:0] cnt_1us;
	reg [19:0] cnt_20ms;
	assign speed_out=speed_out_r+1000;
	
	always@(posedge sys_clk,negedge sys_rst_n)
	begin
	    if(!sys_rst_n)begin
	        cnt_1us <= 1'b0;
	        ok_10us <= 1'b0;
	    end
	    else begin
			if(cnt_1us ==33)begin
				cnt_1us <= 1'b0;
				ok_10us <= 1'b1;
			end
			else begin
	            cnt_1us <= cnt_1us + 1'b1;
				ok_10us <= 1'b0;
			end
	    end
	end
	always@(posedge sys_clk,negedge sys_rst_n)
	begin
	    if(!sys_rst_n)begin
	        cnt_20ms <= 1'b0;
	        ok_20ms <= 1'b0;
	    end
	    else begin
	            if(cnt_20ms ==666665)begin
	                cnt_20ms <= 1'b0;
	                ok_20ms <= 1'b1;
	            end
	            else begin
	                cnt_20ms <= cnt_20ms + 1'b1;
	                ok_20ms <= 1'b0;
	            end
	    end
	end
		
	reg A_reg,A_reg0;
	reg B_reg,B_reg0;
	wire A_Debounce;
	wire B_Debounce;
	always@(posedge sys_clk,negedge sys_rst_n)begin
	    if(!sys_rst_n)begin
	        A_reg  <= 1'b1;
	        A_reg0 <= 1'b1;
	        B_reg  <= 1'b1;
	        B_reg0 <= 1'b1;
	    end
	    else begin
	        if(ok_10us)begin
	            A_reg <= A;
	            A_reg0 <= A_reg;
	            B_reg <= B;
	            B_reg0 <= B_reg;
	        end
	    end
	end
		
	assign A_Debounce = A_reg0 && A_reg && A;
	assign B_Debounce = B_reg0 && B_reg && B;
		
	reg A_Debounce_reg;
	wire A_posedge,A_negedge;
	always@(posedge sys_clk,negedge sys_rst_n)begin
	    if(!sys_rst_n)begin
	        A_Debounce_reg <= 1'b1;
	    end
	    else begin
	        A_Debounce_reg <= A_Debounce;
	    end
	end
	assign A_posedge = !A_Debounce_reg && A_Debounce;
	assign A_negedge = A_Debounce_reg && !A_Debounce;
		
	reg rotary_right;
	reg rotary_left;
	always@(posedge sys_clk,negedge sys_rst_n)begin
	    if(!sys_rst_n)begin
	        rotary_right <= 1'b1;
	        rotary_left <= 1'b1;
	    end
	    else begin
	        if(A_posedge && !B_Debounce)begin
	            rotary_right <= 1'b1;
	        end
	        else if(A_posedge && B_Debounce)begin
	            rotary_left <= 1'b1;
	        end
	        else if(A_negedge && B_Debounce)begin
	            rotary_right <= 1'b0;
	        end
	        else if(A_negedge && !B_Debounce)begin
	            rotary_left <= 1'b0;
	        end
	    end
	end
		
	reg rotary_right_reg,rotary_left_reg;
	wire rotary_right_pos,rotary_left_pos;
	always@(posedge sys_clk,negedge sys_rst_n)begin
	    if(!sys_rst_n)begin
	        rotary_right_reg <= 1'b1;
	        rotary_left_reg <= 1'b1;
	    end
	    else begin
	        rotary_right_reg <= rotary_right;
	        rotary_left_reg <= rotary_left;
	    end
	end
		
	assign rotary_right_pos = !rotary_right_reg && rotary_right;
	assign rotary_left_pos = !rotary_left_reg && rotary_left;
		
	 always@(posedge sys_clk,negedge sys_rst_n) begin
	    if(!sys_rst_n)begin
	        speed_cnt <= 16'd0;
	        speed_can_all<=16'd0;
			speed_out_r<=16'd0;
	        end
	    else begin
	        if(ok_20ms) begin
	            speed_out_r <= speed_cnt;
	            speed_cnt <= 16'd0;
	        end
	        else begin
	        	if(rotary_right_pos)begin
	            	speed_cnt <= speed_cnt + 16'd1;
	            	speed_can_all<=speed_can_all+ 16'd1;
	            	end
	            else if(rotary_left_pos)begin
	            	speed_cnt <= speed_cnt - 16'd1;
	            	speed_can_all<=speed_can_all- 16'd1;
	            	end
	        end
	     end
	  end
endmodule    //encoder

