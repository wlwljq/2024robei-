module motor(
	sys_clk,
	sys_rst_n,
	rdata,
	rx_sig,
	encoder1_A,
	encoder1_B,
	encoder2_A,
	encoder2_B,
	encoder3_A,
	encoder3_B,
	encoder4_A,
	encoder4_B,
	motorA_1,
	motorA_2,
	motorB_1,
	motorB_2,
	motorC_1,
	motorC_2,
	motorD_1,
	motorD_2,
	led);

	//---Ports declearation: generated by Robei---
	input sys_clk;
	input sys_rst_n;
	input [7:0] rdata;
	input rx_sig;
	input encoder1_A;
	input encoder1_B;
	input encoder2_A;
	input encoder2_B;
	input encoder3_A;
	input encoder3_B;
	input encoder4_A;
	input encoder4_B;
	output motorA_1;
	output motorA_2;
	output motorB_1;
	output motorB_2;
	output motorC_1;
	output motorC_2;
	output motorD_1;
	output motorD_2;
	output [5:0] led;

	wire sys_clk;
	wire sys_rst_n;
	wire [7:0] rdata;
	wire rx_sig;
	wire encoder1_A;
	wire encoder1_B;
	wire encoder2_A;
	wire encoder2_B;
	wire encoder3_A;
	wire encoder3_B;
	wire encoder4_A;
	wire encoder4_B;
	wire motorA_1;
	wire motorA_2;
	wire motorB_1;
	wire motorB_2;
	wire motorC_1;
	wire motorC_2;
	wire motorD_1;
	wire motorD_2;
	reg [5:0] led;

	//----Code starts here: integrated by Robei-----
	
	wire rx_sig_negedge;
	
	
	
	wire  [15:0] speed_set_1_n;
	wire  [15:0] speed_set_2_n;
	wire  [15:0] speed_set_3_n;
	wire  [15:0] speed_set_4_n;
	
	reg signed [15:0] speed_set_1;
	reg signed [15:0] speed_set_2;
	reg signed [15:0] speed_set_3;
	reg signed [15:0] speed_set_4;
	
	
	
	reg signed [15:0] speed_glo;
	reg signed [15:0] speed_yaw;
	
	reg rx_sig_dly;
	reg  [15:0] KP;
	reg  [15:0] KI;
	
	reg  [3:0] control_flag;
	reg  [7:0] control_cnt;
	reg  go_flag;
	
	
	reg ok_10ms;
	reg [31:0] cnt_10ms;
	
	assign speed_set_1_n=speed_set_1+1000;
	assign speed_set_2_n=speed_set_2+1000;
	assign speed_set_3_n=speed_set_3+1000;
	assign speed_set_4_n=speed_set_4+1000;
	
	always@(posedge sys_clk,negedge sys_rst_n)
	begin
	    if(!sys_rst_n)begin
	        cnt_10ms <= 1'b0;
	        ok_10ms <= 1'b0;
	    end
	    else begin
	            if(cnt_10ms ==333333)begin
	                cnt_10ms <= 1'b0;
	                ok_10ms <= 1'b1;
	            end
	            else begin
	                cnt_10ms <= cnt_10ms + 1'b1;
	                ok_10ms <= 1'b0;
	            end
	    end
	end
	
	assign rx_sig_negedge = ~rx_sig & rx_sig_dly; //ÏÂ½µÑØ
	
	always@(posedge sys_clk or negedge sys_rst_n) begin
	    if(!sys_rst_n)
	        rx_sig_dly <= 1'b0;
	    else
	        rx_sig_dly <= rx_sig;
	end
	
	//always @(posedge sys_clk or negedge sys_rst_n)begin
	//    if(!sys_rst_n)begin
	//        led<=0;
	//        end
	//    else begin
	//        if(speed>0)
	//            led<=1;
	//        else
	//            led<=0;
	//    end
	//end
	
	always @(posedge sys_clk or negedge sys_rst_n)begin
	    if(!sys_rst_n)begin                    
	        control_flag<=4'd00;               
	        speed_glo<=2;                      
	        speed_yaw<=3;                      
	        KP<=75;                            
	        KI<=9;                             
	       // led<=0;                          
	        end                                
	    else if(rx_sig_negedge)                
	        case(rdata)                        
	            8'h50: begin                   
	                    speed_glo<=2;          
	                    speed_yaw<=3;          
	                    led[1]<=1;             
	                    led[2]<=0;             
	                    led[3]<=0;             
	                    led[4]<=0;             
	                    led[5]<=0;             
	                    KP<=75;                
	                    KI<=9;                 
	                   end                     
	            8'h51: begin                   
	                    speed_glo<=5;          
	                    speed_yaw<=5;          
	                    led[1]<=1;             
	                    led[2]<=1;             
	                    led[3]<=0;             
	                    led[4]<=0;             
	                    led[5]<=0;             
	                    KP<=70;                
	                    KI<=8;                 
	                   end                     
	            8'h52: begin                   
	                    speed_glo<=10;         
	                    speed_yaw<=8;          
	                    led[1]<=1;             
	                    led[2]<=1;             
	                    led[3]<=1;             
	                    led[4]<=0;             
	                    led[5]<=0;             
	                    KP<=65;                
	                    KI<=7;                 
	                   end                     
	            8'h53: begin                   
	                    speed_glo<=17;         
	                    speed_yaw<=10;         
	                    led[1]<=1;             
	                    led[2]<=1;             
	                    led[3]<=1;             
	                    led[4]<=1;             
	                    led[5]<=0;             
	                    KP<=60;                
	                    KI<=6;                 
	                   end                     
	            8'h54: begin                   
	                    speed_glo<=25;         
	                    speed_yaw<=15;         
	                    led[1]<=1;             
	                    led[2]<=1;             
	                    led[3]<=1;             
	                    led[4]<=1;             
	                    led[5]<=1;             
	                    KP<=60;                
	                    KI<=6;                 
	                   end                         
	            8'h55: begin
	                    KP<=KP+10; 
	                   // led<=!led;
	                   end
	            8'h56: begin
	                    KP<=KP-10; 
	                   // led<=!led;
	                   end
	            8'h57: begin
	                    KI<=KI+1; 
	                   // led<=!led;
	                   end
	            8'h58: begin
	                    KI<=KI-1;
	                  //  led<=!led;
	                   end
	            
	            8'h70: begin            //Ç°½ø
	                    control_flag<=4'd00;
	                   end
	
	            8'h71: begin            //Ç°½ø
	                    control_flag<=4'd01;
	                   end
	            8'h72: begin            //ºóÍË
	                    control_flag<=4'd02;
	                   end
	            8'h73: begin            //×óÒÆ
	                    control_flag<=4'd03;
	                   end
	            8'h74: begin            //ÓÒÒÆ
	                    control_flag<=4'd04;
	                   end
	            8'h75: begin            //ÄæÊ±Õë
	                    control_flag<=4'd05;
	                   end
	            8'h76: begin            //Ë³Ê±Õë
	                    control_flag<=4'd06;
	                   end
	
	
	         default:  begin
	                    control_flag<=control_flag;
	                    speed_glo<=speed_glo;
	                    KP<=KP;
	                    KI<=KI;
	                   end
	        endcase
	     else begin
	                control_flag<=control_flag;
	                speed_glo<=speed_glo;
	                KP<=KP;
	                KI<=KI;
	           end
	end
	
	
	always @(posedge sys_clk or negedge sys_rst_n)begin
	    if(!sys_rst_n)begin
	        control_cnt<=0;
	    end
	    else if(rx_sig&&(rdata==8'h71||rdata==8'h72||rdata==8'h73||rdata==8'h74||rdata==8'h75||rdata==8'h76))begin
	        led[0]<=1;
	        control_cnt<=0;          
	    end
		else if(ok_10ms) begin
		    led[0]<=0;
			control_cnt<=control_cnt==200?200:control_cnt+1;
		end
		else
		   control_cnt<=control_cnt;
	end
	
	
	always @(posedge sys_clk or negedge sys_rst_n)begin
	    if(!sys_rst_n)begin
	        speed_set_1<=0;
	        speed_set_2<=0;
	        speed_set_3<=0;
	        speed_set_4<=0;
	        end
	    else if(control_cnt<7) begin
	        case(control_flag)
	            4'd00: begin            //Í£Ö¹
	                    speed_set_1<=0;
	                    speed_set_2<=0;
	                    speed_set_3<=0;
	                    speed_set_4<=0;
	                   end
	
	            4'd01: begin            //Ç°½ø
	                    speed_set_1<=speed_glo;
	                    speed_set_2<=speed_glo;
	                    speed_set_3<=speed_glo;
	                    speed_set_4<=speed_glo;
	                   end
	            4'd02: begin            //ºóÍË
	                    speed_set_1<=-speed_glo;
	                    speed_set_2<=-speed_glo;
	                    speed_set_3<=-speed_glo;
	                    speed_set_4<=-speed_glo;
	                   end
	            4'd03: begin            //×óÒÆ
	                    speed_set_1<=-speed_glo;
	                    speed_set_2<=speed_glo;
	                    speed_set_3<=-speed_glo;
	                    speed_set_4<=speed_glo;
	                   end
	            4'd04: begin            //ÓÒÒÆ
	                    speed_set_1<=speed_glo;
	                    speed_set_2<=-speed_glo;
	                    speed_set_3<=speed_glo;
	                    speed_set_4<=-speed_glo;
	                   end
	            4'd05: begin            //ÄæÊ±Õë
	                    speed_set_1<=-speed_yaw;
	                    speed_set_2<=speed_yaw;
	                    speed_set_3<=speed_yaw;
	                    speed_set_4<=-speed_yaw;
	                   end
	            4'd06: begin            //Ë³Ê±Õë
	                    speed_set_1<=speed_yaw;
	                    speed_set_2<=-speed_yaw;
	                    speed_set_3<=-speed_yaw;
	                    speed_set_4<=speed_yaw;
	                   end
	            default:begin
	                    speed_set_1<=speed_set_1;
	                    speed_set_2<=speed_set_2;
	                    speed_set_3<=speed_set_3;
	                    speed_set_4<=speed_set_4;
	                   end
	        endcase                       
	    end
	    else begin
	        speed_set_1<=0;
	        speed_set_2<=0;
	        speed_set_3<=0;
	        speed_set_4<=0;
	    end 
	   
	end
	
	
	//---Module instantiation---
	motor_contr motor_contr1(
		.sys_clk(sys_clk),
		.sys_rst_n(sys_rst_n),
		.encoder_A(encoder1_A),
		.encoder_B(encoder1_B),
		.speed_set(speed_set_1_n),
		.Kp(KP),
		.Ki(KI),
		.motorout_1(motorA_1),
		.motorout_2(motorA_2));

	motor_contr motor_contr2(
		.sys_clk(sys_clk),
		.sys_rst_n(sys_rst_n),
		.encoder_A(encoder2_A),
		.encoder_B(encoder2_B),
		.speed_set(speed_set_2_n),
		.Kp(KP),
		.Ki(KI),
		.motorout_1(motorB_1),
		.motorout_2(motorB_2));

	motor_contr motor_contr3(
		.sys_clk(sys_clk),
		.sys_rst_n(sys_rst_n),
		.encoder_A(encoder3_A),
		.encoder_B(encoder3_B),
		.speed_set(speed_set_3_n),
		.Kp(KP),
		.Ki(KI),
		.motorout_1(motorC_1),
		.motorout_2(motorC_2));

	motor_contr motor_contr4(
		.sys_clk(sys_clk),
		.sys_rst_n(sys_rst_n),
		.encoder_A(encoder4_A),
		.encoder_B(encoder4_B),
		.speed_set(speed_set_4_n),
		.Kp(KP),
		.Ki(KI),
		.motorout_1(motorD_1),
		.motorout_2(motorD_2));

endmodule    //motor

